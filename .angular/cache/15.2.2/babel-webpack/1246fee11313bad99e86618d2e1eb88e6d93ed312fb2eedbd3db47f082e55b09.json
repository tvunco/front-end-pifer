{"ast":null,"code":"import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { debounceTime, shareReplay, map } from 'rxjs/operators';\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var progress = function (snap) {\n      return subscriber.next(snap);\n    };\n    var error = function (e) {\n      return subscriber.error(e);\n    };\n    var complete = function () {\n      return subscriber.complete();\n    };\n    // emit the current state of the task\n    progress(task.snapshot);\n    // emit progression of the task\n    var unsubscribeFromOnStateChanged = task.on('state_changed', progress);\n    // use the promise form of task, to get the last success snapshot\n    task.then(function (snapshot) {\n      progress(snapshot);\n      setTimeout(function () {\n        return complete();\n      }, 0);\n    }, function (e) {\n      progress(task.snapshot);\n      setTimeout(function () {\n        return error(e);\n      }, 0);\n    });\n    // the unsubscribe method returns by storage isn't typed in the\n    // way rxjs expects, Function vs () => void, so wrap it\n    return function unsubscribe() {\n      unsubscribeFromOnStateChanged();\n    };\n  }).pipe(\n  // since we're emitting first the current snapshot and then progression\n  // it's possible that we could double fire synchronously; namely when in\n  // a terminal state (success, error, canceled). Debounce to address.\n  debounceTime(0));\n}\nfunction getDownloadURL(ref) {\n  return from(getDownloadURL$1(ref));\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadata(ref) {\n  return from(getMetadata$1(ref));\n}\n// MARK: Breaking change (renaming put to uploadBytesResumable)\nfunction uploadBytesResumable(ref, data, metadata) {\n  return new Observable(function (subscriber) {\n    var task = uploadBytesResumable$1(ref, data, metadata);\n    var subscription = fromTask(task).subscribe(subscriber);\n    return function unsubscribe() {\n      subscription.unsubscribe();\n      task.cancel();\n    };\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n}\n// MARK: Breaking change (renaming put to uploadString)\nfunction uploadString(ref, data, format, metadata) {\n  return from(uploadString$1(ref, data, format, metadata));\n}\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (snapshot) {\n    return {\n      progress: snapshot.bytesTransferred / snapshot.totalBytes * 100,\n      snapshot: snapshot\n    };\n  }));\n}\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };","map":{"version":3,"names":["getDownloadURL","getDownloadURL$1","getMetadata","getMetadata$1","uploadBytesResumable","uploadBytesResumable$1","uploadString","uploadString$1","Observable","from","debounceTime","shareReplay","map","fromTask","task","subscriber","progress","snap","next","error","e","complete","snapshot","unsubscribeFromOnStateChanged","on","then","setTimeout","unsubscribe","pipe","ref","data","metadata","subscription","subscribe","cancel","bufferSize","refCount","format","percentage","bytesTransferred","totalBytes"],"sources":["D:/Argentina Programa/proyecto integrador/pifer/Front-End/node_modules/rxfire/storage/index.esm.js"],"sourcesContent":["import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { debounceTime, shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n    return new Observable(function (subscriber) {\n        var progress = function (snap) { return subscriber.next(snap); };\n        var error = function (e) { return subscriber.error(e); };\n        var complete = function () { return subscriber.complete(); };\n        // emit the current state of the task\n        progress(task.snapshot);\n        // emit progression of the task\n        var unsubscribeFromOnStateChanged = task.on('state_changed', progress);\n        // use the promise form of task, to get the last success snapshot\n        task.then(function (snapshot) {\n            progress(snapshot);\n            setTimeout(function () { return complete(); }, 0);\n        }, function (e) {\n            progress(task.snapshot);\n            setTimeout(function () { return error(e); }, 0);\n        });\n        // the unsubscribe method returns by storage isn't typed in the\n        // way rxjs expects, Function vs () => void, so wrap it\n        return function unsubscribe() {\n            unsubscribeFromOnStateChanged();\n        };\n    }).pipe(\n    // since we're emitting first the current snapshot and then progression\n    // it's possible that we could double fire synchronously; namely when in\n    // a terminal state (success, error, canceled). Debounce to address.\n    debounceTime(0));\n}\nfunction getDownloadURL(ref) {\n    return from(getDownloadURL$1(ref));\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadata(ref) {\n    return from(getMetadata$1(ref));\n}\n// MARK: Breaking change (renaming put to uploadBytesResumable)\nfunction uploadBytesResumable(ref, data, metadata) {\n    return new Observable(function (subscriber) {\n        var task = uploadBytesResumable$1(ref, data, metadata);\n        var subscription = fromTask(task).subscribe(subscriber);\n        return function unsubscribe() {\n            subscription.unsubscribe();\n            task.cancel();\n        };\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n}\n// MARK: Breaking change (renaming put to uploadString)\nfunction uploadString(ref, data, format, metadata) {\n    return from(uploadString$1(ref, data, format, metadata));\n}\nfunction percentage(task) {\n    return fromTask(task).pipe(map(function (snapshot) { return ({\n        progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\n        snapshot: snapshot\n    }); }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}