{"ast":null,"code":"import { ref, uploadBytes } from \"@angular/fire/storage\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  uploadImage($event, name) {\n    const file = $event.target.files[0];\n    ///console.log(file);\n    const imgRef = ref(this.storage, `imagen/` + name);\n    uploadBytes(imgRef, file).then(response => {\n      this.getImages();\n    }).catch(error => console.log(error));\n  }\n}\nImageService.ɵfac = function ImageService_Factory(t) {\n  return new (t || ImageService)(i0.ɵɵinject(i1.Storage));\n};\nImageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageService,\n  factory: ImageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAkBA,GAAG,EAAEC,WAAW,QAAQ,uBAAuB;;;AAIjE,OAAM,MAAOC,YAAY;EAEvBC,YAAqBC,OAAgB;IAAhB,YAAO,GAAPA,OAAO;EAAc;EAEnCC,WAAW,CAACC,MAAU,EAAEC,IAAY;IAC7C,MAAMC,IAAI,GAAGF,MAAM,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACnC;IACA,MAAMC,MAAM,GAAGX,GAAG,CAAC,IAAI,CAACI,OAAO,EAAE,SAAS,GAAEG,IAAI,CAAE;IAClDN,WAAW,CAACU,MAAM,EAAEH,IAAI,CAAC,CACxBI,IAAI,CAACC,QAAQ,IAAG;MAAE,IAAI,CAACC,SAAS,EAAE;IAAA,CAAC,CAAC,CACpCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAEjC;;AAZWd,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAiB,SAAZjB,YAAY;EAAAkB,YAFX;AAAM","names":["ref","uploadBytes","ImageService","constructor","storage","uploadImage","$event","name","file","target","files","imgRef","then","response","getImages","catch","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["D:\\Argentina Programa\\proyecto integrador\\pifer\\Front-End\\src\\app\\service\\image.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, ref, uploadBytes } from \"@angular/fire/storage\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageService {\n\n  constructor( private storage: Storage ) { }\n\n  public uploadImage($event:any, name: string){\nconst file = $event.target.files[0]\n///console.log(file);\nconst imgRef = ref(this.storage, `imagen/`+ name )\nuploadBytes(imgRef, file)\n.then(response => {this.getImages()})\n.catch(error => console.log(error))\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}